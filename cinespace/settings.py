"""
Django settings for registro project.

Generated by 'django-admin startproject' using Django 3.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

from cryptography.fernet import Fernet
import os
from pathlib import Path
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', '-Nn<{P|;3dz&U_)Jh##9%l=SsO[[}Bjo.Ir}|?}#`xBMs``=C>')


DEBUG = os.getenv('DEBUG', 'True') == 'True'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Lista de aplicativos instalados
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'contas',
    'pesquisa',
    'django_extensions',
    'reproducao', 
    'spacemusic', 
    'spacebot', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # PRIMEIRO
    'django.contrib.auth.middleware.AuthenticationMiddleware', # DEPOIS
    'contas.middleware.PerfilMiddleware',  # DEPOIS dos dois acima
]

ROOT_URLCONF = 'cinespace.urls'

# settings.py
LOGIN_URL = 'paginalogin'  # Define a URL de login

ALLOWED_HOSTS = ['*']




# Configuração de templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Certifique-se de que o caminho está correto
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cinespace.wsgi.application'
# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
import pymysql
pymysql.install_as_MySQLdb()
# Configurações do banco de dados
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'cinespace',  # Nome do banco de dados
        'USER': 'root',  # Usuário do MySQL
        'PASSWORD': 'root',  # Senha do MySQL
        'HOST': 'localhost',  # Host do MySQL
        'PORT': '3306',  # Porta do MySQL
        'OPTIONS': {
            'ssl': {'ca': None},  # Ignorar SSL (não recomendado para produção)
        },
    }
}


GEOIP_PATH = os.path.join(BASE_DIR, 'geoip')



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'contas.Usuario'  # Alterado para 'contas'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Backend padrão
    'contas.backends.PersonalizadoBackend',      # Backend personalizado
)

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Diretório para arquivos estáticos
    os.path.join(BASE_DIR, 'pesquisa'),  # Adicione esta linha para incluir o diretório
    os.path.join(BASE_DIR, 'contas'),  # Adicione esta linha para incluir o diretório
    os.path.join(BASE_DIR, 'spacemusic'),  # Adicione esta linha para incluir o diretório do Space Music
    os.path.join(BASE_DIR, 'reproducao'),  # Adicione esta linha para incluir o diretório do reproducao
]


# Configurações de e-mail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'oficialcinespace@gmail.com')  # Usuário do Gmail (use variável de ambiente)
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'eqxb suep grwj byzj') # Senha do Gmail ou senha de app (use variável de ambiente)
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'oficialcinespace@gmail.com') # Email padrão de envio (use variável de ambiente)

# BASE_DIR é um objeto Path
BASE_DIR = Path(__file__).resolve().parent.parent 

# Configurações de mídia
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Salva sessões no banco de dados
SESSION_COOKIE_AGE = 3600  # 1 hora
SESSION_SAVE_EVERY_REQUEST = True  # Garante que a sessão seja salva a cada requisição
SESSION_COOKIE_SECURE = False  # Temporariamente desative para testes locais
CSRF_COOKIE_SECURE = False  # Temporariamente desative para testes locais


# Chave de criptografia (armazenada em variável de ambiente)
ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY', Fernet.generate_key().decode())